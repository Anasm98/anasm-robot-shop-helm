apiVersion: apps/v1
kind: Deployment
metadata:
  name: cart
  labels:
    service: cart
spec:
  replicas: 1
  selector:
    matchLabels:
      service: cart
  template:
    metadata:
      labels:
        service: cart
    spec:
      containers:
      - name: cart
        image: robotshop/rs-cart:latest
        # imagePullPolicy: IfNotPresent 
        ports:
        - containerPort: 8080
        env:
          - name: INSTANA_AGENT_HOST
            valueFrom:
              fieldRef: 
                fieldPath: status.hostIP 
        resources:
          requests:
            cpu: 100m
            memory: 50Mi
          limits:
            cpu: 200m
            memory: 100Mi
        # livenessProbe:
        #   periodSeconds: 5
        #   httpGet:
        #     path: /health
        #     port: 8080
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: cart
spec:
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
  selector:
    service: cart

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalogue
  labels:
    service: catalogue
spec:
  replicas: 1
  selector:
    matchLabels:
      service: catalogue
  template:
    metadata:
      labels:
        service: catalogue
    spec:
      containers:
      - name: catalogue
        image: robotshop/rs-catalogue:latest
        # imagePullPolicy: IfNotPresent 
        ports:
        - containerPort: 8080
        env:
          - name: INSTANA_AGENT_HOST
            valueFrom:
              fieldRef: 
                fieldPath: status.hostIP 
        resources:
          requests:
            cpu: 100m
            memory: 50Mi
          limits:
            cpu: 200m
            memory: 100Mi
        # livenessProbe:
        #   periodSeconds: 5
        #   httpGet:
        #     path: /health
        #     port: 8080
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: catalogue
spec:
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
  selector:
    service: catalogue

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dispatch
  labels:
    service: dispatch
spec:
  replicas: 1
  selector:
    matchLabels:
      service: dispatch
  template:
    metadata:
      labels:
        service: dispatch
    spec:
      containers:
      - name: dispatch
        image: robotshop/rs-dispatch:latest
        # imagePullPolicy: IfNotPresent 
        env:
          - name: INSTANA_AGENT_HOST
            valueFrom:
              fieldRef: 
                fieldPath: status.hostIP 
        resources:
          requests:
            cpu: 100m
            memory: 50Mi
          limits:
            cpu: 200m
            memory: 100Mi
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: dispatch
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - protocol: TCP
      port: 55555
      targetPort: 0
  selector:
    service: dispatch

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  labels:
    service: mongodb
spec:
  replicas: 1
  selector:
    matchLabels:
      service: mongodb
  template:
    metadata:
      labels:
        service: mongodb
    spec:
      containers:
      - name: mongodb
        image: robotshop/rs-mongodb:latest
        # imagePullPolicy: IfNotPresent 
        ports:
        - containerPort: 27017
        resources:
          requests:
            cpu: 100m
            memory: 50Mi
          limits:
            cpu: 200m
            memory: 100Mi
        # livenessProbe:
        #   periodSeconds: 5
        #   httpGet:
        #     path: /health
        #     port: 27017
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb
spec:
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017
  selector:
    service: mongodb

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  labels:
    service: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      service: mysql
  template:
    metadata:
      labels:
        service: mysql
    spec:
      containers:
      - name: mysql
        image: robotshop/rs-mysql:latest
        # imagePullPolicy: IfNotPresent 
        ports:
        - containerPort: 3306
        securityContext:
          capabilities:
            add: ["NET_ADMIN"]
        resources:
          requests:
            cpu: 100m
            memory: 512Mi
          limits:
            cpu: 200m
            memory: 700Mi
        # livenessProbe:
        #   periodSeconds: 5
        #   httpGet:
        #     path: /health
        #     port: 3306
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
  selector:
    service: mysql

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: payment
  labels:
    service: payment
spec:
  replicas: 1
  selector:
    matchLabels:
      service: payment
      stage: prod
  template:
    metadata:
      labels:
        service: payment
        stage: prod
    spec:
      containers:
      - name: payment
        image: robotshop/rs-payment:latest
        # imagePullPolicy: IfNotPresent 
        ports:
        - containerPort: 8080
        env:
          - name: INSTANA_AGENT_HOST
            valueFrom:
              fieldRef: 
                fieldPath: status.hostIP 
        resources:
          requests:
            cpu: 100m
            memory: 50Mi
          limits:
            cpu: 200m
            memory: 100Mi
        # livenessProbe:
        #   periodSeconds: 5
        #   httpGet:
        #     path: /health
        #     port: 8080
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: payment
spec:
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
  selector:
    service: payment

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
  labels:
    service: rabbitmq
spec:
  replicas: 1
  selector:
    matchLabels:
      service: rabbitmq
  template:
    metadata:
      labels:
        service: rabbitmq
    spec:
      containers:
      - name: rabbitmq
        image: rabbitmq:3.7-management-alpine
        # imagePullPolicy: IfNotPresent 
        ports:
        - containerPort: 5672
        - containerPort: 15672
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 200m
            memory: 512Mi
        # livenessProbe:
        #   periodSeconds: 5
        #   httpGet:
        #     path: /health
        #     port: 8080
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
spec:
  type: ClusterIP
  ports:
  - name: tcp-amqp
    port: 5672
    targetPort: 5672
  - name: http-management
    port: 15672
    targetPort: 15672
  - name: tcp-epmd
    port: 4369
    targetPort: 4369
  selector:
    service: rabbitmq

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ratings
  labels:
    service: ratings
spec:
  replicas: 1
  selector:
    matchLabels:
      service: ratings
  template:
    metadata:
      labels:
        service: ratings
    spec:
      containers:
      - name: ratings
        image: robotshop/rs-ratings:latest
        # imagePullPolicy: IfNotPresent 
        ports:
        - containerPort: 80
        resources:
          requests:
            cpu: 100m
            memory: 50Mi
          limits:
            cpu: 200m
            memory: 100Mi
        # livenessProbe:
        #   periodSeconds: 5
        #   httpGet:
        #     path: /_health
        #     port: 80
        readinessProbe:
          httpGet:
            path: /_health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
          failureThreshold: 30
          successThreshold: 1
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: ratings
spec:
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  selector:
    service: ratings

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  labels:
    service: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      service: redis
  serviceName: redis
  template:
    metadata:
      labels:
        service: redis
    spec:
      containers:
      - name: redis
        image: redis:4.0.6
        # imagePullPolicy: IfNotPresent 
        ports:
        - containerPort: 6379
        volumeMounts:
          - name: data
            mountPath: /mnt/redis
        resources:
          requests:
            cpu: 100m
            memory: 50Mi
          limits:
            cpu: 200m
            memory: 100Mi
        # livenessProbe:
        #   periodSeconds: 5
        #   httpGet:
        #     path: /health
        #     port: 6379
      restartPolicy: Always
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: standard
        volumeMode: Filesystem
        resources:
          requests:
            storage: 1Gi

---
apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379
  selector:
    service: redis

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: shipping
  labels:
    service: shipping
spec:
  replicas: 1
  selector:
    matchLabels:
      service: shipping
  template:
    metadata:
      labels:
        service: shipping
    spec:
      containers:
      - name: shipping
        image: robotshop/rs-shipping:latest
        # imagePullPolicy: IfNotPresent 
        ports:
        - containerPort: 8080
        resources:
          requests:
            cpu: 100m
            memory: 500Mi
          limits:
            cpu: 200m
            memory: 700Mi
        # livenessProbe:
        #   periodSeconds: 5
        #   httpGet:
        #     path: /health
        #     port: 8080
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          failureThreshold: 30
          successThreshold: 1
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: shipping
spec:
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
  selector:
    service: shipping

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user
  labels:
    service: user
spec:
  replicas: 1
  selector:
    matchLabels:
      service: user
  template:
    metadata:
      labels:
        service: user
    spec:
      containers:
      - name: user
        image: robotshop/rs-user:latest
        # imagePullPolicy: IfNotPresent 
        ports:
        - containerPort: 8080
        env:
          - name: INSTANA_AGENT_HOST
            valueFrom:
              fieldRef: 
                fieldPath: status.hostIP 
        resources:
          requests:
            cpu: 100m
            memory: 50Mi
          limits:
            cpu: 200m
            memory: 100Mi
        # livenessProbe:
        #   periodSeconds: 5
        #   httpGet:
        #     path: /health
        #     port: 8080
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: user
spec:
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
  selector:
    service: user

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
  labels:
    service: web
spec:
  replicas: 1
  selector:
    matchLabels:
      service: web
  template:
    metadata:
      labels:
        service: web
    spec:
      containers:
      - name: web
        image: robotshop/rs-web:latest
        # imagePullPolicy: IfNotPresent 
        ports:
        - containerPort: 8080
        resources:
          requests:
            cpu: 100m
            memory: 50Mi
          limits:
            cpu: 200m
            memory: 100Mi
        # livenessProbe:
        #   periodSeconds: 5
        #   httpGet:
        #     path: /health
        #     port: 8080
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: web
spec:
  type: NodePort
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
      nodePort: 30007
  selector:
    service: web

